WARMUP

1)SOLVE ME FIRST
def solveMeFirst(a,b):
    return (a+b)

num1 = int(input())
num2 = int(input())
res = solveMeFirst(num1,num2)
print(res)


2)ARRAY SUM
import os
import sys
def simpleArraySum(ar):
    S = 0
    for x in ar:
        S += x
    return (S)
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    ar_count = int(input())

    ar = list(map(int, input().rstrip().split()))

    result = simpleArraySum(ar)

    fptr.write(str(result) + '\n')

    fptr.close()


3)COMPARE TRIPLETS
import math
import os
import random
import re
import sys
def compareTriplets(a, b):
    A = 0
    B = 0
    for i in range(len(a)):
        if a[i] > b[i]:
            A += 1
        elif a[i] < b[i]:
            B += 1
        elif a[i] == b[i]:
            None
    return (A, B)
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    a = list(map(int, input().rstrip().split()))

    b = list(map(int, input().rstrip().split()))

    result = compareTriplets(a, b)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()


4)BIG SUM
import math
import os
import random
import re
import sys
def aVeryBigSum(ar):
    S = 0
    for x in ar:
        S += x
    return (S)
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    ar_count = int(input())

    ar = list(map(int, input().rstrip().split()))

    result = aVeryBigSum(ar)

    fptr.write(str(result) + '\n')

    fptr.close()


5)STAIRCASE
import math
import os
import random
import re
import sys
def staircase(n):
    for x in range(1, n+1):
        l = '#'*x
        print (l.rjust(n))
    
if __name__ == '__main__':
    n = int(input())

    staircase(n)


6)BIRTHDAY CAKE
import math
import os
import random
import re
import sys
def birthdayCakeCandles(candles):
    M = max(candles)
    return (candles.count(M))
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    candles_count = int(input().strip())

    candles = list(map(int, input().rstrip().split()))

    result = birthdayCakeCandles(candles)

    fptr.write(str(result) + '\n')

    fptr.close()


7)PLUS MINUS
import math
import os
import random
import re
import sys
def plusMinus(arr):
    P = 0
    N = 0
    Z = 0
    tot = len(arr)
    for x in arr:
        if x > 0:
            P += 1
        elif x < 0:
            N += 1
        elif x == 0:
            Z += 1
    pos = P/tot
    neg = N/tot
    zero = Z/tot
    print ("%0.6f" % pos)
    print ("%0.6f" % neg)
    print ("%0.6f" % zero)

if __name__ == '__main__':

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    plusMinus(arr)


8)MINI MAX SUM
import math
import os
import random
import re
import sys
def miniMaxSum(arr):
    s = 0
    S = 0
    arr.sort()
    for x in range(0, len(arr)-1):
        s += arr[x]
    for y in range(1, len(arr)):
        S += arr[y]
    
    print (s, S)

if __name__ == '__main__':
    arr = list(map(int, input().rstrip().split()))

    miniMaxSum(arr)


9)DIAGONAL DIFFERENCE
import math
import os
import random
import re
import sys
def diagonalDifference(arr):
    D = 0
    d = 0
    N = len(arr)
    for i in range(N):
        D += arr[i][i]
        d += arr[i][N-1-i]
    
    return (abs(D-d))
        
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    result = diagonalDifference(arr)

    fptr.write(str(result) + '\n')

    fptr.close()


10)TIME CONVERSION
import os
import sys
def timeConversion(s):
    L = s.split(':')
    h = L[0]
    sec = list(L[2])
    if sec[2] == 'A':
        if h == '12':
            nh = '00'
        else:
            nh = h
    elif sec[2] == 'P':
        if h == '12':
            nh = '12'
        else:
            nh = str(int(h) + 12)
    mn = L[1]
    secn = sec[:2]
    secn = ''.join(secn)
    T = [nh, mn, secn]
    return (':'.join(T))

if __name__ == '__main__':
    f = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = timeConversion(s)

    f.write(result + '\n')

    f.close()
