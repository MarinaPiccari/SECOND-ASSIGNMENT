SORTING

1)INTRO
import math
import os
import random
import re
import sys

def introTutorial(V, arr):
    for x in range(len(arr)):
        if arr[x] == V:
            return (x)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    V = int(input())

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = introTutorial(V, arr)

    fptr.write(str(result) + '\n')

    fptr.close()


2)RUNNING TIME
import math
import os
import random
import re
import sys
def runningTime(arr):
    c = 0
    for i in range(0, len(arr)):
        for j in range(0, len(arr) - i - 1):
            if arr[j] > arr[j+1]:
                c += 1
                x = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = x
    return c
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = runningTime(arr)

    fptr.write(str(result) + '\n')

    fptr.close()


3)QUICKSORT1
import math
import os
import random
import re
import sys
def quickSort(arr):
    p = arr[0]
    L = [p]
    for i in range(len(arr)):
        if arr[i] < p:
            L.insert(0, arr[i])
        elif arr[i] > p:
            L.append(arr[i])
    return L
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = quickSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()


4)CLOSEST NUMBERS
import math
import os
import random
import re
import sys
def closestNumbers(arr):
    L = []
    diff = []
    arr.sort()
    for i in range(1, len(arr)):
        d = abs(arr[i-1]-arr[i])
        diff.append(d)
    m = min(diff)
    for j in range(len(diff)):
        if diff[j] == m:
            L.append(arr[j])
            L.append(arr[j+1])
    return (L)
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = closestNumbers(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()


5)FIND THE MERIDIAN
import math
import os
import random
import re
import sys
def findMedian(arr):
    arr.sort()
    i = round((len(arr)-1)/2)
    return arr[i]
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = findMedian(arr)

    fptr.write(str(result) + '\n')

    fptr.close()


6)CORRECTNESS & INVARIANT
def insertion_sort(l):
    for i in range(1, len(l)):
        j = i-1
        key = l[i]
        while (j >= 0) and (l[j] > key):
           l[j+1] = l[j]
           j -= 1
        l[j+1] = key

m = int(input().strip())
ar = [int(i) for i in input().strip().split()]
insertion_sort(ar)
print(" ".join(map(str,ar)))


7)INSERTION SORT1
import math
import os
import random
import re
import sys
def insertionSort1(n, arr):
    l = arr[n-1]
    for x in range((n-1), -1, -1):
        if arr[x] > l:
            arr[x+1] = arr[x]
            print (*arr)
            if x == 0:
                arr[0] = l
                print(*arr)
        elif arr[x] < l and l not in arr:
            arr[x+1] = l
            print (*arr)

if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)


8)INSERTION SORT2
import math
import os
import random
import re
import sys
def insertionSort2(n, arr):
    for i in range(1, len(arr)):
        j = i-1
        x = arr[i]
        while (j >= 0) and (arr[j] > x):
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = x
        print (*arr)

if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    insertionSort2(n, arr)


9)COUNTING SORT1
import math
import os
import random
import re
import sys
def countingSort(arr):
    L = [0]*100
    for i in range(len(arr)):
        x = arr[i]
        L[x] += 1
    return L
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()


10)COUNTING SORT2
import math
import os
import random
import re
import sys
def countingSort(arr):
    sol = []
    L = [0]*100
    for i in range(len(arr)):
        x = arr[i]
        L[x] += 1
    for y in range(len(L)):
        sol.extend(L[y]*[y])
    return sol
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()